<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>akka-examples (0.0.1) <inlinemediaobject>
<imageobject>
<imagedata fileref="https://travis-ci.org/daggerok/akka-examples.svg?branch=master"/>
</imageobject>
<textobject><phrase>Build Status</phrase></textobject>
</inlinemediaobject></title>
<date>2019-10-13 14:18:02 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2019-10-13 14:18:02 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<bridgehead xml:id="introduction" renderas="sect1">Introduction</bridgehead>
<simpara>This documentation contains some help to
<link xl:href="https://github.com/daggerok/akka-examples">examples from akka-examples repository</link>.
Akka playground projects</simpara>
<simpara>This repository contains Akka playground projects examples.</simpara>
<simpara><link xl:href="https://daggerok.github.io/akka-examples">Documentation</link></simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="./an-akka-test/">actors testing</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-config-akka-example/">akka config</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-distributed-word-counter-example/">parallel word counter</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./an-actor-selection-example/">actor selections</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-bank-account-example/">bank account</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-counter-example/">counter</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-self-example/">send message to self</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-ping-pong-example/">ping-pong</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-logger-example/">Logger sbt akka starter</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./a-simple-example/">Simplest sbt akka starter</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./hello-world/">Basic actor</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./idea-scala-sbt-project">Learning Akka projects</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./another-akka-try">ping-pong: yet another java gradle / maven docker akka jar&#8230;&#8203;</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./java-gradle-maven-docker-starter">java (gradle / maven) starter in docker</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./kotlin-gradle-maven-docker-starter">kotlin (gradle / maven) starter in docker</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./scala-gradle-maven-docker-starter">scala (gradle / maven) starter in docker</link></simpara>
</listitem>
</itemizedlist>
<simpara><emphasis>other repositories</emphasis></simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/akka-persistence-json-serializaer-example">Akka Persistence | Scala | Jackson JSON Serialization | SBT GitHub: daggerok/akka-persistence-json-serializaer-example</link></simpara>
</listitem>
</itemizedlist>
<simpara>TODO:
- spring-boot + akka <link xl:href="https://www.linkedin.com/pulse/spring-boot-akka-part-1-aliaksandr-liakh">1</link> and <link xl:href="https://www.linkedin.com/pulse/spring-boot-akka-part-2-aliaksandr-liakh">2</link></simpara>
</preface>
<chapter xml:id="implementation">
<title>Implementation</title>

</chapter>
<chapter xml:id="basic-getting-started-java-12">
<title>basic getting started (java 12)</title>
<programlisting language="java" linenumbering="unnumbered">@Value(staticConstructor = "withBody")
class Message {
  private final String body;
}

class HelloWorld extends AbstractLoggingActor {

  @Override
  public Receive createReceive() {
    return receiveBuilder().match(Message.class, message -&gt; onMessage(message))
                           .build();
  }

  private void onMessage(Message message) {
    log().info("received {}", message);
  }
}

@Configuration
class AkkaCfg {

  @Bean
  ActorSystem helloSystem() {
    return ActorSystem.create("hello-world");
  }

  @Bean
  Props helloProps() {
    return Props.create(HelloWorld.class);
  }

  @Bean
  ActorRef helloRef(ActorSystem helloSystem, Props helloProps) {
    return helloSystem.actorOf(helloProps, "hello-actor");
  }
}

@Configuration
@ComponentScan(basePackageClasses = App.class)
public class App {

  public static void main(String[] args) {
    var ctx = new AnnotationConfigApplicationContext(App.class);
    var helloRef = ctx.getBean(ActorRef.class);

    helloRef.tell(Message.withBody("Max"), ActorRef.noSender());
    helloRef.tell(Message.withBody("Bob"), ActorRef.noSender());
    helloRef.tell(Message.withBody("Everyone"), ActorRef.noSender());

    Try.run(() -&gt; TimeUnit.SECONDS.sleep(1))
       .andFinally(() -&gt; ctx.getBean(ActorSystem.class).terminate());
  }
}</programlisting>
</chapter>
<chapter xml:id="others">
<title>others</title>
<section xml:id="scala-akka-sbt-idea">
<title>scala akka sbt IDEA</title>
<formalpara>
<title>build, test and run</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./sbtw clean compile test assembly # run
java -jar target/scala-2.12/*-assembly-*.jar</programlisting>
</para>
</formalpara>
<formalpara>
<title>Supervisor actors</title>
<para>
<programlisting language="scala" linenumbering="unnumbered">package daggerok.supervisor

import akka.actor.SupervisorStrategy.{Escalate, Restart, Resume, Stop}
import akka.actor.{Actor, ActorRef, ActorSystem, OneForOneStrategy, Props, SupervisorStrategy}
import daggerok.supervisor.API.{RestartError, ResumeError, StopError}

object API {
  sealed trait ErrorMessage extends RuntimeException
  case object StopError extends ErrorMessage
  case object ResumeError extends ErrorMessage
  case object RestartError extends ErrorMessage
}

class Child extends Actor {

  override def preStart(): Unit = {
    println("Child: preStart")
    Thread.sleep(100)
    super.preStart()
  }

  override def preRestart(reason: Throwable, message: Option[Any]): Unit = {
    println("Child: preRestart")
    Thread.sleep(100)
    super.preRestart(reason, message)
  }

  override def postRestart(reason: Throwable): Unit = {
    println("Child: postRestart")
    Thread.sleep(100)
    super.postRestart(reason)
  }

  override def postStop(): Unit = {
    println("Child: postStop")
    Thread.sleep(100)
    super.postStop()
  }

  override def receive: Receive = {
    case "Stop" =&gt; throw StopError
    case "Resume" =&gt; throw ResumeError
    case "Restart" =&gt; throw RestartError
    case _ =&gt; throw new RuntimeException
  }
}

class Parent extends Actor {

  var childRef: ActorRef = _

  import scala.concurrent.duration._ // seconds
  override def supervisorStrategy: SupervisorStrategy =
    OneForOneStrategy(maxNrOfRetries = 5, withinTimeRange = 1 second) {
      case StopError =&gt; Stop
      case ResumeError =&gt; Resume
      case RestartError =&gt; Restart
      case _: RuntimeException =&gt; Escalate
    }

  override def preStart(): Unit = {
    println("Parent: preStart")
    childRef = context.actorOf(Props[Child], "child")
    Thread.sleep(100)
    super.preStart()
  }

  override def receive: Receive = {
    case message =&gt;
      println(s"Parent message: $message")
      childRef ! message
      Thread.sleep(100)
  }
}

object SupervisorApp {
  def main(args: Array[String]): Unit = {
    val system = ActorSystem("supervisor-system")
    val parent = system.actorOf(Props[Parent], "parent")
//    parent! "Stop"
//    parent! "Resume"
    parent! "Restart"
    Thread.sleep(1000)
    system.terminate()
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Tell / Ask to actors</title>
<para>
<programlisting language="scala" linenumbering="unnumbered">package daggerok.tellandaskactors

import akka.actor.{Actor, ActorRef, ActorSystem, Props}
import akka.util.Timeout
import daggerok.tellandaskactors.CheckerAPI.{BlacklistUserResponse, CheckUserRequest, WhitelistUserResponse}
import daggerok.tellandaskactors.RecorderAPI.CreateUser
import daggerok.tellandaskactors.StorageAPI.AddUser

case class User(name: String)

object RecorderAPI {
  sealed trait RecorderMessage
  case class CreateUser(user: User) extends RecorderMessage
}

class Recorder(checker: ActorRef, storage: ActorRef) extends Actor {
  import scala.concurrent.duration._ // seconds
  implicit val timeout = Timeout(5 seconds)

  import akka.pattern.ask // actor ask map
  import scala.concurrent.ExecutionContext.Implicits.global
  override def receive: Receive = {
    case CreateUser(user) =&gt;
      checker ? CheckUserRequest(user) map {
        case WhitelistUserResponse(user) =&gt;
          storage ! AddUser(user)
        case BlacklistUserResponse(user) =&gt;
          println(s"Recorder black user: $user")
      }
    case _ =&gt; println("Checker: unknown message received")
  }
}

object CheckerAPI {
  sealed trait CheckerRequest
  case class CheckUserRequest(user: User) extends CheckerRequest

  sealed trait CheckerResponse
  case class BlacklistUserResponse(user: User) extends CheckerResponse
  case class WhitelistUserResponse(user: User) extends CheckerResponse
}

class Checker extends Actor {
  val blackList = List("bad", "black", "evil")
  override def receive: Receive = {
    case CheckUserRequest(user) if (blackList.exists(name =&gt; user.name.contains(name))) =&gt;
      sender() ! BlacklistUserResponse(user)
    case CheckUserRequest(user) =&gt;
      sender() ! WhitelistUserResponse(user)
    case _ =&gt; println("Checker: unknown message received")
  }
}

object StorageAPI {
  sealed trait StorageMessage
  case class AddUser(user: User) extends StorageMessage
}

class Storage extends Actor {
  private var users = List.empty[User]
  override def receive: Receive = {
    case AddUser(user) =&gt;
      println(s"user $user added")
      users = user :: users
    case _ =&gt; println("Storage: unknown message received")
  }
}

object TellAndAskApp {
  def main(args: Array[String]): Unit = {
    val system = ActorSystem("tell-ask-system")
    val checker = system.actorOf(Props[Checker], "checker")
    val storage = system.actorOf(Props[Storage], "storage")
    val recorder = system.actorOf(Props(new Recorder(checker, storage)), "recorder")

    recorder ! CreateUser(User("white"))
    recorder ! CreateUser(User("black"))
    recorder ! CreateUser(User("one more white"))
    Thread.sleep(1000)
    system.terminate()
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Music Player</title>
<para>
<programlisting language="scala" linenumbering="unnumbered">package daggerok.musicplayer

import akka.actor.{Actor, ActorSystem, Props}
import daggerok.musicplayer.MusicController.{PlayMsg, StopMsg}
import daggerok.musicplayer.MusicPlayer.{StartMusicMsg, StopMusicMsg}

object MusicController {
  sealed trait MusicControllerMessage
  case object PlayMsg extends MusicControllerMessage
  case object StopMsg extends MusicControllerMessage

  def props = Props[MusicControllerActor]
}

class MusicControllerActor extends Actor {
  override def receive: Receive = {
    case PlayMsg =&gt; println("playing music...")
    case StopMsg =&gt; println("music is stopped")
  }
}

object MusicPlayer {
  sealed trait MusicPlayerMessage
  case object StopMusicMsg extends MusicPlayerMessage
  case object StartMusicMsg extends MusicPlayerMessage
}

class MusicPlayerActor extends Actor {
  override def receive: Receive = {
    case StopMusicMsg =&gt; println("I don't wanna stop!")
    case StartMusicMsg =&gt;
      val ctrlActor = context.actorOf(MusicController.props, "ctrl-actor")
      ctrlActor ! PlayMsg
    case _ =&gt; println("received unknown message.")
  }
}

object MusicPlayerApp {
  def main(args: Array[String]): Unit = {
    val system = ActorSystem("music-system")
    val actor = system.actorOf(Props[MusicPlayerActor], "mp-actor")

    actor ! StartMusicMsg
    actor ! StopMusicMsg
    Thread.sleep(1000)
    system.terminate()
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Hello World</title>
<para>
<programlisting language="scala" linenumbering="unnumbered">package daggerok.helloworld

import akka.actor.{Actor, ActorSystem, Props}

case class HelloMessage(name: String)

class HelloActor extends Actor {
  override def receive: Receive = {
    case HelloMessage(name) =&gt; println(s"Hello, $name!")
  }
}

object HelloWorldApp {
  def main(args: Array[String]): Unit = {
    val helloSystem = ActorSystem("hello-actor-system")
    val helloActor = helloSystem.actorOf(Props[HelloActor], "hello-actor")

    helloActor ! HelloMessage("Максимко")
    Thread.sleep(1000)
    helloSystem.terminate()
  }
}</programlisting>
</para>
</formalpara>
</section>
<section xml:id="java-gradle-maven-docker-starter">
<title>Java Gradle Maven Docker Starter</title>
<simpara>This is just an Akka java gradle / maven / docker / starter project&#8230;&#8203;</simpara>
<formalpara>
<title>build and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker-compose down -v; ./mvnw clean package; ./gradlew clean build; docker-compose up --build --force-recreate --remove-orphans

# or
docker-compose down -v
./mvnw clean package
./gradlew clean build
docker-compose up --build --force-recreate --remove-orphans</programlisting>
</para>
</formalpara>
<simpara>links:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://doc.akka.io/docs/akka/current/actors.html#creating-actors">Akka docs</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="kotlin-gradle-maven-docker-starter">
<title>Kotlin Gradle Maven Docker Starter</title>
<simpara>This is just an Akka kotlin gradle / maven / docker / starter project&#8230;&#8203;</simpara>
<formalpara>
<title>build and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker-compose down -v; ./mvnw clean package; ./gradlew clean build; docker-compose up --build --force-recreate --remove-orphans

# or
docker-compose down -v
./mvnw clean package
./gradlew clean build
docker-compose up --build --force-recreate --remove-orphans</programlisting>
</para>
</formalpara>
<simpara>links:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://kotlinlang.org/docs/reference/using-maven.html">kotlin with maven</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://doc.akka.io/docs/akka/current/actors.html#creating-actors">Akka docs</link></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="akka">
<title>akka</title>
<simpara>generated using <link xl:href="https://github.com/daggerok/generator-jvm">jvm</link> yeoman generator</simpara>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down

./gradlew clean build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
</section>
<section xml:id="another-akka-try">
<title>another-akka-try</title>
<formalpara>
<title>test</title>
<para>
<screen>./gradlew clean installDist
bash build/install/another-akka-try/bin/another-akka-try

./gradlew clean distZip
unzip -o build/distributions/*.zip -d /tmp
bash /tmp/another-akka-try-0.0.1/bin/another-akka-try

./mvnw
java -jar target/*-all.jar</screen>
</para>
</formalpara>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down

./gradlew clean build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
<simpara>generated using <link xl:href="https://github.com/daggerok/generator-jvm/">jvm</link> yeoman generator</simpara>
</section>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.lightbend.com/akka">Learning Akka</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.lightbend.com/blog/akka-revealed-jvm-architects-journey-from-resilient-actors-to-scalable-clusters">Videos: Intro to Akka</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://dzone.com/refcardz/reactive-programming-akka">Reactive Programming with Akka</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.lightbend.com/blog/akka-and-the-zen-of-reactive-system-design">Akka and the Zen of Reactive System Design</link></simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="enjoy">
<title>Enjoy! :)</title>

</chapter>
</book>